-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr(
        {[Left, {[s("!!"), fun (l, op, r) { Binop (op, l, r) }]}],
         [Left, {[s("&&"), fun (l, op, r) { Binop (op, l, r) }]}],
         [Nona, {[s("=="), fun (l, op, r) { Binop (op, l, r) }], [s("!="), fun (l, op, r) { Binop (op, l, r) }]}],
         [Nona, {[s("<"),  fun (l, op, r) { Binop (op, l, r) }], [s(">"),  fun (l, op, r) { Binop (op, l, r) }], [s("<="),  fun (l, op, r) { Binop (op, l, r) }], [s(">="),  fun (l, op, r) { Binop (op, l, r) }]}],
         [Left, {[s("+"),  fun (l, op, r) { Binop (op, l, r) }], [s("-"),  fun (l, op, r) { Binop (op, l, r) }]}],
         [Left, {[s("*"),  fun (l, op, r) { Binop (op, l, r) }], [s("/"),  fun (l, op, r) { Binop (op, l, r) }], [s("%"),  fun (l, op, r) { Binop (op, l, r) }]}]
        }, primary
      );

      
var stmt = memo $ eta syntax (
      singleton | 
      head=singleton s[";"] tail=stmt {Seq (head, tail)}
    ),
    singleton = memo $ eta syntax (
      x=lident s[":="] v=exp { Assn(x,v) } |
      kSkip { Skip } | 
      kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
      kWrite v=inbr[s("("), exp, s(")")] { Write (v) } |
      kWhile e=exp kDo s=stmt kOd { While (e, s) } |
      kDo s=stmt kWhile e=exp kOd { DoWhile (s, e) } |
      kFor pred=stmt s[","] e=exp s[","] s=stmt kDo post=stmt kOd { Seq(pred, While (e, Seq (post, s))) } |
      kIf e=exp kThen s1=stmt kElse s2=stmt kFi { If (e, s1, s2) } |
      kIf e=exp kThen s=stmt eliff=elseif { If (e, s, eliff) } 
    ),
    elseif = memo $ eta syntax (
      kFi { Skip } |
      kElif e=exp kThen s1=stmt kElse s2=stmt kFi { If (e, s1, s2) } |
      kElif e=exp kThen s=stmt eliff=elseif { If (e, s, eliff) } 
    );
-- Public top-level parser
public parse = stmt;