-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefinitions(scope, defList) {
  case defList of
    {}     -> scope
  | head:tail ->  case head of
                    Var (nList)          -> addDefinitions(scope.addNames(nList), tail)
                  | Fun (fn, argList, e) -> addDefinitions(scope.addFunction(fn, argList, e), tail)
                  esac
  esac
}

fun addArgs(scope, z) {
  case z of 
    {} -> scope
  | [arg, v]:tail -> addArgs(scope.addName(arg, Var (v)), tail)
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  var ret = case expr of
    Assn (e1, e2) -> 
      case evalList(c, {e1, e2}) of    
        [[s, w], {x, v}] -> [[s <- [x,  Var (v)], w], v]
      esac
  | Seq (e1, e2) ->
      case eval(c, e1) of  
        [c, _] -> eval(c, e2)
      esac
  | Skip -> 
      [c, Void]
  | Read (x) ->
      case readWorld(w) of
        [v, w] -> [[s <- [x, Var (v)], w], Void]
      esac
  | Write (e) ->
      case eval(c, e) of  
        [c, v] -> [[s, writeWorld(v, w)], Void]
      esac 
  | If (e, s1, s2) -> 
      case eval(c, e) of
        [c, 0] -> eval(c, s2)
      | [c, _] -> eval(c, s1)
      esac
  | While (e, s) ->
      case eval(c, e) of
        [c, 0] -> [c, Void]
      | [c, _] -> eval(c, Seq (s, While (e, s)))
      esac 
  | DoWhile (s, e) -> 
      eval(c, Seq (s, While (e, s)))
  | Var (x) ->
      case lookup (s, x) of
        Var (v) -> [c, v]
      esac 
  | Ref (x) ->
      [c, x]
  | Const (n) ->
      [c, n] 
  | Binop (o, e1, e2) ->  
      case eval(c, e1) of 
        [c, e1_] ->
          case eval(c, e2) of
            [c, e2_] -> [c, evalOp(o, e1_, e2_)]
          esac
      esac
  | Ignore (e) -> 
      case eval(c, e) of 
        [c, _] -> [c, Void]
      esac
  | Scope (defList, e) -> 
      case eval([addDefinitions(enterScope(s), defList), w], e) of 
        [[s, w], v] -> [[leaveScope(s), w], v]
      esac
  | Call (fn, exprList) ->
      case s.checkFun(fn) of
        _ -> 
          case s.lookup(fn) of 
            Fun (argList, e) ->
              case evalList(c, exprList) of
                [[s1, w1], vals] ->
                  case addArgs(enterFunction(s1), zip(argList, vals)) of 
                    s2 -> 
                      case eval ([s2, w], e) of
                        [[s3, w2], v] -> [[s1.leaveFunction(getGlobal(s3)), w2], v]
                      esac
                  esac
              esac
          esac 
      esac
  esac;
  ret
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}