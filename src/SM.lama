-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration

fun eval (c@[s, sigma, w], insns) {
  case insns of
    {}      -> c
  | i: ost_  ->
    case i of
      READ      ->
        case readWorld(w) of
          [z,w] -> eval([z:s, sigma, w], ost_)
        esac
    | WRITE     ->
        case s of
          (s:ost) -> eval([ost, sigma, writeWorld(s, w)], ost_)
        esac
    | BINOP (o) ->
        case s of
          (s1:s2:ost) -> eval([evalExpr(o, Const(s2), Const(s1)):ost, sigma, w], ost_)
        esac
    | LD    (x) -> 
        eval([sigma(x) : s, sigma, w], ost_)
    | ST    (x) ->
        case s of
          (s:ost) -> eval([ost, sigma<-[x, s], w], ost_)
        esac
    | CONST (n) -> 
        eval([n:s,sigma,w], ost_)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
	  Var(x) -> {LD(x)}
	| Const(n) -> {CONST(n)}
	| Binop(operation, expr1, expr2) -> 
      compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP(operation)}
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
	  Assn(x,v) -> compileExpr(v) +++ {ST(x)}
	| Seq(s1,s2)-> compileSM(s1) +++ compileSM(s2)
	| Skip      -> {}
	| Read(x)   -> {READ, ST(x)}
	| Write(v)  -> compileExpr(v) +++ {WRITE}
	esac
}
