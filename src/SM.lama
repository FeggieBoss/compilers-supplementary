-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[s, sigma, w], insns) {
  case insns of
    {}      -> c
  | i: ost_ ->
    case i of
      READ        ->
        case readWorld(w) of
          [z,w] -> eval(env, [z:s, sigma, w], ost_)
        esac
    | WRITE       ->
        case s of
          (s:ost) -> eval(env, [ost, sigma, writeWorld(s, w)], ost_)
        esac
    | BINOP (o)   ->
        case s of
          (s1:s2:ost) -> 
            eval(env, [evalExpr({}, Binop(o, Const(s2), Const(s1))):ost, sigma, w], ost_)
        esac
    | LD    (x)   -> 
        eval(env, [sigma(x) : s, sigma, w], ost_)
    | ST    (x)   ->
        case s of
          (s:ost) -> eval(env, [ost, sigma<-[x, s], w], ost_)
        esac
    | CONST (n)   -> 
        eval(env, [n:s,sigma,w], ost_)
    | LABEL (_)   ->
        eval(env, c, ost_)
    | JMP (l)     ->
        eval(env, c, fromLabel(env, l))
    | CJMP (t, l) ->  
        case s of 
          n:osts -> 
            case [t, n] of 
              ["nz", 0] -> eval(env, [osts, sigma, w], ost_)
            | ["nz", _] -> eval(env, [osts, sigma, w], fromLabel(env, l))
            | ["z", 0]  -> eval(env, [osts, sigma, w], fromLabel(env, l))
            | ["z", _]  -> eval(env, [osts, sigma, w], ost_)
            esac
        esac 
    esac
  esac
} 

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
	  Var(x) -> singletonBuffer(LD (x))
	| Const(n) -> singletonBuffer(CONST (n))
	| Binop(operation, expr1, expr2) -> 
      compileExpr(expr1) <+> compileExpr(expr2) <+ BINOP (operation)
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s) ->
      case env.genLabels(2) of 
        [toCondLab, toCodeLab, env] -> 
          case compile(toCondLab, env, s) of 
            [_, env, sCode] -> [false, env, singletonBuffer(JMP (toCondLab)) <+ LABEL (toCodeLab) <+> sCode <+ LABEL (toCondLab) <+> compileExpr(e) <+ CJMP ("nz", toCodeLab)]
          esac
      esac
    | DoWhile (s, e) ->
      case env.genLabels(2) of 
        [toCondLab, toCodeLab, env] -> 
          case compile(toCondLab, env, s) of 
            [_, env, sCode] -> [false, env, singletonBuffer(LABEL (toCodeLab)) <+> sCode <+ LABEL (toCondLab) <+> compileExpr(e) <+ CJMP ("nz", toCodeLab)]
          esac
      esac
    | If (e, s1, s2) ->
      case env.genLabels(2) of 
        [s1Lab, toS2Lab, env] ->
          case compile (s1Lab, env, s1) of 
            [s1Used, env, s1Code] ->
              case compile (lab, env, s2) of 
                [_, env, s2Code] -> [true, env, compileExpr(e) <+ CJMP ("z", toS2Lab) <+> s1Code <+>  label(s1Lab, s1Used) <+ JMP (lab) <+ LABEL (toS2Lab) <+> s2Code]
              esac
          esac
      esac
    esac
  } 

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
