-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun accum(s, ct, argList) {
    case argList of 
      {} -> ct
    | arg:ost -> assign(s, Arg (ct), arg); accum(s, ct+1, ost)
    esac 
  }

  fun createLocal(st, a, l) {
    case take(st, a) of
      [ost, argList] -> 
        case makeState(a, l) of
          s -> accum(s, 0, argList); [ost, s]
        esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    fun getmas(arr) {
      case arr of 
        Sexp(_, mas) -> mas 
      | _ -> arr
      esac 
    }
    case insns of 
      {} -> c
    | i:ost_ -> 
      case i of
        BINOP (o)   ->
          case st of
            (s1:s2:st) -> 
              eval([evalOp(o, s2, s1):st, cst, s, w], ost_)
          esac
      | LD (x)      -> 
          eval([lookup(s, x):st, cst, s, w], ost_)
      | LDA (x)     -> 
          eval([RefVal(x):st, cst, s, w], ost_)
      | ST    (x)   ->
          case st of
            (z:st) -> assign(s, x, z); eval([st, cst, s, w], ost_)
          esac
      | STI         -> 
          case st of
            v:(RefVal(x)):st -> assign(s, x, v); eval([v:st, cst, s, w], ost_)
          esac
      | SEXP (nm, ln) ->
          case take(st, ln) of 
            [ost, mas] -> eval([Sexp (nm, listArray(mas)):ost, cst, s, w], ost_)
          esac
      | CONST (n)   -> 
          eval([n:st, cst, s, w], ost_)
      | LABEL (_)   ->
          eval(c, ost_)
      | JMP (l)     ->
          eval(c, fromLabel(env, l))
      | CJMP (t, l) ->  
          case st of 
            n:st -> 
              case [t, n] of 
                ["nz", 0] -> eval([st, cst, s, w], ost_)
              | ["nz", _] -> eval([st, cst, s, w], fromLabel(env, l))
              | ["z", 0]  -> eval([st, cst, s, w], fromLabel(env, l))
              | ["z", _]  -> eval([st, cst, s, w], ost_)
              esac
          esac
      | CALL (f, _) -> 
          eval([st, [s, ost_]:cst, s, w], fromLabel(env, f))   
      | BEGIN (_, a, l) -> 
          case createLocal(st, a, l) of 
            [st, s] -> eval([st, cst, s, w], ost_)
          esac
      | GLOBAL (x)  -> 
          assign(s, Glb(x), 0); eval(c, ost_)
      | END         -> 
          case cst of
            {} -> c
          | [s, insns]:ost -> eval([st, ost, s, w], insns)
          esac
      | DUP         ->
          case st of 
            h : _ -> eval ([h:st, cst, s, w], ost_)
          esac
      | DROP        ->
          case st of 
            _ : st -> eval ([st, cst, s, w], ost_)
          esac
      | STRING (str_) -> 
          eval([str_:st, cst, s, w], ost_)
      | ARRAY (ln)  ->
          case take(st, ln) of 
            [ost, mas] -> eval([listArray(mas):ost, cst, s, w], ost_)
          esac
      | STA         ->
          case st of 
            v:id:arr:ost -> 
              var mas = getmas(arr);
              mas[id] := v; 
              eval([mas[id]:ost, cst, s, w], ost_)
          esac
      | ELEM        ->
          case st of 
            id:arr:ost ->
              var mas = getmas(arr);
              eval([mas[id]:ost, cst, s, w], ost_)
          esac
      | BUILTIN (fn, n) ->
          case take(st, n) of 
            [ost, mas] ->
              case evalBuiltin(fn, mas, w) of 
                [res, w] -> eval([res:ost, cst, s, w], ost_)
              esac
          esac
      esac
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var   (x)         -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref   (x)         -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> 
        case compile(lab, env, e) of 
          [used, env, code] -> [used, env, code <+ DROP]
        esac
    | Binop (o, e1, e2) -> 
        case genLabelsCompile(env, {e1, e2}) of
          [env, {e1Code, e2Code}] -> [false, env, e1Code <+> e2Code <+ BINOP (o)]
        esac
    | Assn  (l, r)      ->
        case genLabelsCompile(env, {l, r}) of
          [env, {lCode, rCode}] -> 
            case l of
              ElemRef(_, _) -> [false, env, lCode <+> rCode <+ STA]
            | _             -> [false, env, lCode <+> rCode <+ STI]
            esac
        esac
    | Seq   (s1, s2) ->
        case genLabelsCompile(env, {s1, s2}) of
          [env, {s1Code, s2Code}] -> [false, env, s1Code <+> s2Code]
        esac
    | Set (l, r) -> 
        case genLabelsCompile(env, {r}) of
          [env, {rCode}] ->
            case lookupVal(env, l) of 
              adr -> [false, env, rCode <+ DUP <+ ST (adr)]
            esac
        esac
    | While (e, s) ->
        case genLabelsCompile(env, {e, s}) of
          [env, {eCode, sCode}] -> 
            case env.genLabels(2) of
              [toCondLab, toCodeLab, env] ->
                [false, env, singletonBuffer(JMP (toCondLab)) <+ LABEL (toCodeLab) <+> sCode <+ LABEL (toCondLab) <+> eCode <+ CJMP ("nz", toCodeLab)]
            esac 
        esac 
    | DoWhile (s, e) ->
        case genLabelsCompile(env, {s, e}) of
          [env, {sCode, eCode}] -> 
            case env.genLabels(2) of
              [toCondLab, toCodeLab, env] ->
                [false, env, singletonBuffer(LABEL (toCodeLab)) <+> sCode <+ LABEL (toCondLab) <+> eCode <+ CJMP ("nz", toCodeLab)]
            esac
        esac 
    | If (e, s1, s2) ->
        case genLabelsCompile(env, {e, s1, s2}) of
          [env, {eCode, s1Code, s2Code}] -> 
            case genLabel(env) of
              [toS2Lab, env] ->
                [true, env, eCode <+ CJMP ("z", toS2Lab) <+> s1Code <+ JMP (lab) <+ LABEL (toS2Lab) <+> s2Code]
            esac 
        esac 
    | Call (f, inList) -> 
        case genLabel(env) of  
          [fLab, env] -> 
            case compileFun(env, f) of 
              [env, fCode] ->
                case mergeCompileCodes(fLab, env, inList) of
                  [fUsed, env, code] -> [false, env, code <+> label(fLab, fUsed) <+ fCode]
                esac 
            esac
        esac
    | Scope (ds, e) -> 
        case add(env, ds) of 
          [begCode, env] -> 
            case addFn(env, ds) of 
              env ->
                case genLabelsCompile(env, {e}) of
                  [env, {code}] -> [false, leaveScope(env), begCode <+> code]
                esac 
            esac 
        esac
    | Builtin (fn, exprs) -> 
        case genLabelsCompile(env, exprs) of
          [env, codes] ->
            [false, env, foldl(fun(ost, code){code<+>ost}, emptyBuffer(), codes) <+ BUILTIN (fn, size(exprs))]
        esac
    | String (s) -> [false,env,singletonBuffer(STRING(s))]
    | Sexp (s, inList) ->
        case genLabel(env) of 
          [lab, env] ->
            case mergeCompileCodes(lab, env, inList) of 
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ SEXP (s, size(inList))]
            esac
        esac
    | Array (inList) -> 
        case genLabel(env) of 
          [lab, env] ->
            case mergeCompileCodes(lab, env, inList) of 
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ ARRAY (size(inList))]
            esac
        esac
    | Elem (v, id) ->
        case genLabelsCompile(env, {v, id}) of
          [env, {vCode, idCode}] -> [false, env, vCode <+> idCode <+ ELEM] 
        esac 
    | ElemRef (v, id) ->
        case genLabelsCompile(env, {v, id}) of
          [env, {vCode, idCode}] -> [false, env, vCode <+> idCode]
        esac 
    esac
  }

  fun genLabelsCompile(env, l) {
    foldr(fun([env, ost], e) {
      case genLabel(env) of 
        [lab, env] -> 
          case compile(lab, env, e) of 
            [used, env, code] -> [env, (code <+> label(lab, used)):ost]
          esac
      esac 
    }, [env, {}], l)
  }
  
  fun compileFun(env, f) {
    case lookupFun(env, f) of 
      Fun (fn, a) ->
        case fn[0]=='$' of 
          0 -> [env, CALL(fn, a)]
        | _ -> [env, BUILTIN(f, a)]
        esac
    esac
  }
  
  fun mergeCompileCodes(lab, env, mas){
    compile(lab, env, foldr(fun (ost, cur) { Seq(cur, ost) }, Skip, mas))
  }
  
  fun add(env, ds) {
    fun iterateOver(code, env, arr) {
      case arr of 
        {} -> [code, env]
      | d:ost -> 
          case d of 
            Var (nList) -> 
              case addVars(env, nList) of 
                env ->
                  case isGlobal(env) of
                    1 -> iterateOver(foldl(fun (accumulator, n) { accumulator <+ GLOBAL (n) }, code, nList), env, ost)
                  | _ -> iterateOver(code, env, ost)
                  esac
              esac 
          | Fun (fn, argList, _) -> 
              case genFunLabel(env, fn) of 
                [fLab, env] -> iterateOver(code, addFun(env, fn, fLab, size(argList)), ost)
              esac
          esac
      esac
    }

    case beginScope(env) of
      env -> iterateOver(emptyBuffer(), env, ds)
    esac 
  }

  fun addFn(env, ds) {
    fun iterateOver(env, arr) {
      case arr of 
        {} -> env 
      | d:ost -> 
          case d of
            Fun (fn, argList, e) -> 
              case lookupFun(env, fn) of 
                Fun(fLab, _) -> iterateOver(rememberFun(env, fLab, argList, e), ost)
              esac 
          | _ -> iterateOver(env, ost) 
          esac 
      esac 
    }

    iterateOver(env, ds)
  }

  fun compile_(endLab, env, stmt) {
    fun compileFuns(env) {
      fun iterateOver(code, env, fs) {
        case fs of
          {} -> [code, env]
        | f:ost -> 
            case f of
              Fun(fn, argList, e, s) ->
                case addArgs(beginFun(env, s), argList) of 
                  env ->
                    case genLabel(env) of 
                      [lab, env] ->
                        case compile(lab, env, e) of 
                          [used, env, eCode] -> iterateOver(singletonBuffer(LABEL (fn)) <+ BEGIN (fn, size(argList), getLocals(env)) <+> eCode <+> label(lab, used) <+ END <+> code, endScope(env), ost)
                        esac 
                    esac
                esac 
            esac 
        esac
      }
      case getFuns(env) of
        [{}, env] -> [emptyBuffer(), env]
      | [fs, env] -> 
          case iterateOver(emptyBuffer(), env, fs) of 
            [code, env] ->
              case compileFuns(env) of 
                [fCode, env] -> [code <+> fCode, env] 
              esac
          esac
      esac
    }

    case stmt of 
      Scope(_, _) -> 
        case compile(endLab, env, stmt) of 
          [_, env, code] -> 
            case compileFuns(env) of 
              [fCode, env] -> 
                [false, env, singletonBuffer(BEGIN("main", 0, getLocals(env))) <+> code <+ END <+> fCode]
            esac  
        esac 
      | _ -> 
        case compile(endLab, env, Scope({}, stmt)) of 
          [_, env, code] -> 
            case compileFuns(env) of 
              [fCode, env] -> 
                [false, env, singletonBuffer(BEGIN("main", 0, getLocals(env))) <+> code <+ END <+> fCode]
            esac 
        esac
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
       case compile_ (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}