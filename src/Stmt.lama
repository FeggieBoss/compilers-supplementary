-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval ([state, world], stmt) {
	case stmt of
	  Assn(x,v)      -> [state <- [x, evalExpr(state, v)], world]
	| Seq(s1,s2)     -> eval(eval([state,world],s1), s2) 
	| Skip           -> [state, world]
	| Read(x)        -> 
		case readWorld(world) of
		  [v, nworld] -> [state <- [x, v], nworld]
		esac
	| Write(v)       -> [state, writeWorld(evalExpr(state, v), world)]
  | If (e, s1, s2) -> 
    case evalExpr(state, e) of
        1 -> eval([state,world], s1)
      | _ -> eval([state,world], s2)
    esac
  | While   (e, s) -> 
    case evalExpr(state, e) of
        1 -> eval(eval([state,world], s), While (e, s))
      | _ -> [state,world]
    esac
  | DoWhile (s, e) -> 
    case eval([state,world], s) of 
      [state_, world_] -> 
        case evalExpr(state_, e) of
            1 -> eval([state_, world_], While (e, s))
          | _ -> [state_, world_]
        esac
      esac
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}